package com.allianz.devpracticces.empdb.interfaces.member;

import com.allianz.devpracticces.empdb.application.utils.member.PracticeMemberService;
import com.allianz.devpracticces.empdb.application.utils.member.PracticeMemberServiceImpl;
import com.allianz.devpracticces.empdb.domain.model.EntityIdentifier;
import com.allianz.devpracticces.empdb.domain.model.member.EmployeeSkill;
import com.allianz.devpracticces.empdb.domain.model.member.LineManager;
import com.allianz.devpracticces.empdb.domain.model.member.PracticeMember;
import com.allianz.devpracticces.empdb.domain.model.member.PracticeMemberRepository;
import com.allianz.devpracticces.empdb.domain.model.practice.Practice;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private PracticeMemberRepository userRepository;
	@Autowired
	private PracticeMemberService practiceMemberService;

	public MainController() {
	}

	@PostMapping(path = "/employeedb/members/add")
	public @ResponseBody String addNewUser (@RequestBody CreatePracticeMemberCommand createPracticeMemberCommand) {
		// @ResponseBody means the returned String is the response, not a view urn
		// @RequestParam means it is a parameter from the GET or POST request

		practiceMemberService.createPracticeMember(createPracticeMemberCommand);



/*		System.out.println("id= "+createPracticeMemberCommand.getEmployeeId());
		EntityIdentifier memIdentifier = new EntityIdentifier("d43wy-ewwewe5:employee");
		LineManager lineManager = new LineManager("LineManager", "i81212", "JK");
		EntityIdentifier practiceId = new EntityIdentifier("d43wy-ewwewe5:practice");
		List<EmployeeSkill> employeeSkills = new ArrayList<EmployeeSkill>();
		EntityIdentifier skillIdentifier = new EntityIdentifier("d43wy-ewwewe5:skill");
		EmployeeSkill skill = new EmployeeSkill("EmployeeSkill", skillIdentifier, 12, true, true);
		employeeSkills.add(skill);
		PracticeMember member = new PracticeMember("PracticeMember", memIdentifier, "i83480", "Amal", "Vijay", lineManager, practiceId, employeeSkills);
		userRepository.save(member);*/
		return "Saved";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<PracticeMember> getAllUsers() {
		// This returns a JSON or XML with the users
		return null;

//		return userRepository.findAll();
	}
}
